name: CI workflow
on:
  push:
    branches:
      - 'v*.*.*'
jobs:
#  build-nginx-image:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Get release version
#        run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
#
#      - uses: actions/checkout@v2
#      - name: Build image
#        run: docker build -t nginx -f ./docker/nginx/Dockerfile .
#
#      - name: Login to GHCR
#        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
#
#      - name: Push image to GHCR
#        run: |
#          IMAGE_ID=ghcr.io/${{ github.repository }}/nginx
#
#          # Change all uppercase to lowercase
#          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#
#          docker tag nginx $IMAGE_ID:$RELEASE_VERSION
#          docker push $IMAGE_ID:$RELEASE_VERSION
#
#  build-php-image:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Get release version
#        run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
#
#      - uses: actions/checkout@v2
#      - name: Build image
#        run: docker build -t php -f ./docker/php/Dockerfile .
#
#      - name: Login to GHCR
#        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
#
#      - name: Push image to GHCR
#        run: |
#          IMAGE_ID=ghcr.io/${{ github.repository }}/php
#
#          # Change all uppercase to lowercase
#          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#
#          docker tag php $IMAGE_ID:$RELEASE_VERSION
#          docker push $IMAGE_ID:$RELEASE_VERSION
  deploy-test:
    runs-on: ubuntu-latest
#    needs: [build-nginx-image, build-php-image]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Create Kubernetes config file
        run: |
          mkdir -p ./.kube/config
          echo ${KUBECONFIG} | base64 -d > ./.kube/config
        env:
          KUBECONFIG: ${{secrets.KUBECONFIG}}

      - name: Set kubernetes context
        run: kubectl config use-context digitalocean-test

      - name: Prepare helm
        run: ./k8s/bin/helm-deploy.sh

      - name: Deploy helm chart
        uses: 'deliverybot/helm@v1'
        with:
          release: 'app'
          helm: 'helm3'
          namespace: 'digitalocean-test'
          chart: 'k8s/chart'
          token: '${{ github.token }}'
          value-files: 'k8s/chart/values.yaml'
        env:
          KUBECONFIG_FILE: './kubeconfig.yaml'